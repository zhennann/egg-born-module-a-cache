{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/db.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/cachedb.js","webpack://backend/./backend/src/config/middleware/adapter/db.js","webpack://backend/./backend/src/config/middleware/cachemem.js","webpack://backend/./backend/src/config/middleware/adapter/mem.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/db.js","webpack://backend/./backend/src/controller/broadcast.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,CAAe;AACxC,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;AACA;;AAEA,iBAAiB,mBAAO,CAAC,EAAa;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA,gBAAgB,mBAAO,CAAC,CAAsB;AAC9C,WAAW,mBAAO,CAAC,CAAiB;;AAEpC;AACA;AACA;AACA;;;;;;;ACNA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC5CA;;AAEA;;AAEA,eAAe,+BAA+B;AAC9C,+DAA+D,qCAAqC;AACpG;AACA;;AAEA;;AAEA;AACA;;;;;;;ACZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;ACjCA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACFA;AACA;;;;;;;ACDA;AACA;AACA;;;;;;;ACFA,gBAAgB,mBAAO,CAAC,CAAyB;AACjD,iBAAiB,mBAAO,CAAC,EAA0B;;AAEnD;AACA;AACA;AACA;;;;;;;ACNA,aAAa,mBAAO,CAAC,EAAiB;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,oCAAoC;AAC3D;;AAEA,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA,+EAA+E,QAAQ;AACvF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;AClFA,cAAc,mBAAO,CAAC,EAAkB;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;AClBA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3EA,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,WAAW,mBAAO,CAAC,EAAoB;AACvC,kBAAkB,mBAAO,CAAC,EAA2B;;AAErD;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK;AACL,aAAa,QAAQ,gBAAgB,EAAE;AACvC,KAAK;AACL;AACA,KAAK,kGAAkG,QAAQ,gBAAgB,EAAE,EAAE;AACnI,KAAK,iGAAiG,QAAQ,gBAAgB,EAAE,EAAE;AAClI;AACA;AACA;;;;;;;ACfA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACVA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACZA;;AAEA;;AAEA;AACA,aAAa,iCAAiC;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  const routes = require('./routes.js')(app);\n\n  return {\n    routes,\n    services,\n    config,\n    locales,\n    errors,\n    middlewares,\n  };\n\n};\n","const version = require('./service/version.js');\nconst db = require('./service/db.js');\n\nmodule.exports = {\n  version,\n  db,\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aCache\n        const sql = `\n          CREATE TABLE aCache (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            value json DEFAULT NULL,\n            timeout int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.db.query(sql);\n      }\n\n      if (options.version === 2) {\n        let sql;\n        // delete\n        sql = `\n          delete from aCache\n        `;\n        await this.ctx.db.query(sql);\n        // alter table: aCache\n        sql = `\n          ALTER TABLE aCache\n            DROP COLUMN timeout,\n            ADD COLUMN expired timestamp DEFAULT NULL\n        `;\n        await this.ctx.db.query(sql);\n      }\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n\n  class Db extends app.Service {\n\n    async set({ module, name, value, timeout }) {\n      const res = await this.ctx.cache.db.module(module)._set({ name, value, timeout, queue: false });\n      return res;\n    }\n\n  }\n\n  return Db;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    cachedb: {\n      global: true,\n      dependencies: 'instance',\n    },\n    cachemem: {\n      global: true,\n    },\n  };\n\n  // queues\n  config.queues = {\n    cacheDbSet: {\n      path: 'db/set',\n    },\n  };\n\n  // broadcasts\n  config.broadcasts = {\n    memRemove: {\n      path: 'broadcast/memRemove',\n    },\n    memClear: {\n      path: 'broadcast/memClear',\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","const cachedb = require('./middleware/cachedb.js');\nconst cachemem = require('./middleware/cachemem.js');\n\nmodule.exports = {\n  cachedb,\n  cachemem,\n};\n","const dbFn = require('./adapter/db.js');\nconst CACHE = Symbol('CTX#__CACHE');\n\nmodule.exports = () => {\n  return async function cachedb(ctx, next) {\n    ctx.cache = ctx.cache || {};\n    Object.defineProperty(ctx.cache, 'db', {\n      get() {\n        if (ctx.cache[CACHE] === undefined) {\n          ctx.cache[CACHE] = new (dbFn(ctx))();\n        }\n        return ctx.cache[CACHE];\n      },\n    });\n\n    // next\n    await next();\n  };\n};\n","const Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class CacheDb {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    // other module's cache\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    async get(name) {\n      const res = await this.has(name);\n      return res ? JSON.parse(res.value) : undefined;\n    }\n\n    async set(name, value, timeout) {\n      await this._set({ name, value, timeout, queue: true });\n    }\n\n    async _set({ name, value, timeout, queue }) {\n      // second\n      const second = timeout ? parseInt(timeout / 1000) : timeout;\n      // expired\n      const expired = second ? `TIMESTAMPADD(SECOND,${second},CURRENT_TIMESTAMP)` : 'null';\n      const res = await ctx.db.get('aCache', {\n        iid: ctx.instance.id,\n        module: this.moduleName,\n        name,\n      });\n      if (res) {\n        await ctx.db.query(`\n          update aCache set value=?, expired=${expired}\n            where id=?\n          `, [ JSON.stringify(value), res.id ]);\n      } else {\n        if (queue) {\n          await ctx.app.meta.queue.pushAsync({\n            subdomain: ctx.subdomain,\n            module: moduleInfo.relativeName,\n            queueName: 'cacheDbSet',\n            data: {\n              module: this.moduleName,\n              name,\n              value,\n              timeout,\n            },\n          });\n        } else {\n          await ctx.db.query(`\n            insert into aCache(iid,module,name,value,expired) values(?,?,?,?,${expired})\n            `, [ ctx.instance.id, this.moduleName, name, JSON.stringify(value) ]);\n        }\n      }\n    }\n\n    async has(name) {\n      const sql = 'select * from aCache where iid=? and module=? and name=? and (expired is null or expired>CURRENT_TIMESTAMP)';\n      const res = await ctx.db.queryOne(sql, [ ctx.instance.id, this.moduleName, name ]);\n      return res;\n    }\n\n    async remove(name) {\n      await ctx.db.delete('aCache', {\n        iid: ctx.instance.id,\n        module: this.moduleName,\n        name,\n      });\n    }\n\n    async clear() {\n      await ctx.db.delete('aCache', {\n        iid: ctx.instance.id,\n        module: this.moduleName,\n      });\n    }\n\n  }\n\n  return CacheDb;\n};\n","const memFn = require('./adapter/mem.js');\nconst CACHE = Symbol('CTX#__CACHE');\n\nmodule.exports = () => {\n  return async function cachemem(ctx, next) {\n    ctx.cache = ctx.cache || {};\n    Object.defineProperty(ctx.cache, 'mem', {\n      get() {\n        if (ctx.cache[CACHE] === undefined) {\n          ctx.cache[CACHE] = new (memFn(ctx))();\n        }\n        return ctx.cache[CACHE];\n      },\n    });\n\n    // next\n    await next();\n  };\n};\n","const CACHEMEMORY = Symbol('APP#__CACHEMEMORY');\n\nconst Fn = module.exports = ctx => {\n\n  class CacheMem {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get memory() {\n      return ctx.app.geto(CACHEMEMORY).geto(ctx.subdomain).geto(this.moduleName);\n    }\n\n    // other module's cache\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get(name) {\n      const res = this.has(name);\n      return res ? res.value : undefined;\n    }\n\n    set(name, value, timeout) {\n      this.memory[name] = {\n        value,\n        timeout: timeout || 0,\n        timestamp: new Date(),\n      };\n    }\n\n    has(name) {\n      const res = this.memory[name];\n      if (!res) return null;\n      return (res.timeout === 0 || (new Date() - res.timestamp) < res.timeout) ? res : null;\n    }\n\n    remove(name) {\n      // remove this\n      this._remove(name);\n      // broadcast\n      ctx.app.meta.broadcast.emit({\n        subdomain: ctx.subdomain,\n        module: 'a-cache',\n        broadcastName: 'memRemove',\n        data: { moduleName: this.moduleName, name },\n      });\n    }\n\n    // by broadcast\n    _remove(name) {\n      delete this.memory[name];\n    }\n\n    clear() {\n      // clear this\n      this._clear();\n      // broadcast\n      ctx.app.meta.broadcast.emit({\n        subdomain: ctx.subdomain,\n        module: 'a-cache',\n        broadcastName: 'memClear',\n        data: { moduleName: this.moduleName },\n      });\n    }\n\n    // by broadcast\n    _clear() {\n      ctx.app[CACHEMEMORY][ctx.subdomain][this.moduleName] = {};\n    }\n\n  }\n\n  return CacheMem;\n};\n","const version = require('./controller/version.js');\nconst db = require('./controller/db.js');\nconst broadcast = require('./controller/broadcast.js');\n\nmodule.exports = app => {\n  const routes = [\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'db/set', controller: db, middlewares: 'inner',\n      meta: { auth: { enable: false } },\n    },\n    // broadcast\n    { method: 'post', path: 'broadcast/memRemove', controller: broadcast, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'broadcast/memClear', controller: broadcast, middlewares: 'inner', meta: { auth: { enable: false } } },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n\n  class DbController extends app.Controller {\n\n    async set() {\n      const res = await this.ctx.service.db.set(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return DbController;\n};\n","module.exports = app => {\n\n  class BroadcastController extends app.Controller {\n\n    async memRemove() {\n      const { sameAsCaller, moduleName, name } = this.ctx.request.body;\n      if (!sameAsCaller) {\n        const moduleCache = this.ctx.cache.mem.module(moduleName);\n        moduleCache._remove(name);\n      }\n      this.ctx.success();\n    }\n\n    async memClear() {\n      const { sameAsCaller, moduleName } = this.ctx.request.body;\n      if (!sameAsCaller) {\n        const moduleCache = this.ctx.cache.mem.module(moduleName);\n        moduleCache._clear();\n      }\n      this.ctx.success();\n    }\n\n  }\n\n  return BroadcastController;\n\n};\n"],"sourceRoot":""}